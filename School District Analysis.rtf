{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Arial-Black;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red149\green105\blue4;\red153\green102\blue51;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c1680\c19835\c100000;\cssrgb\c65333\c48378\c0;\cssrgb\c66800\c47512\c25860;
\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11960\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0  \cf2 # City Schools Analysis;
\f1\b0 \cf0 \
\
~During this Analysis we are going to help Maria revise the uncompleted Math Score and Reading Score for the ninth graders that were reported with inaccurate data. Therefore we will make sure we imported the current student_completed_cdv along with the current schools_completed_ccv.\
   \

\f2\b # Import both student_completed_cdv as well school_completed_cdv datasets and work on both files as follows;\

\f1\b0     \
 ~First column we need to make sure we import the correct data into our Jupyter file we will be working on and we will demonstrate all columns and replace the loads that needs to be corrected.\
\
~We used the loc method on the student_data_df to select all the reading scores from the 9th grade at Thomas High School and replace them with NaN\
 \
~For us to be able to achieve the request we had to run the following code;\
\
 *
\f2\b \cf3 student_data_df.loc[(student_data_df["school_name"]=="Thomas High School") \
                 & (student_data_df["grade"]=="9th") ,"reading_score" ]= np.nan
\f1\b0 \cf0 \
\
~By Using the following code, We were able to check the student data for NaN's; \
   \
   *
\f2\b \cf4 student_data_df.tail(10
\f1\b0 )\cf0 \
\
~By finalizing the first step, we were able to repeat the school district analysis\
 \
 *We needed to get the district analysis, We ran through couple loop holes here trying not to make the same mistakes again. We ran couple codes that at first we were running as we wanted, but we figured it out by going back to our module and request from Maria. We were then able to persecute the codes for the district summary_df.\
 \
 *We worked on the following columns;\
\
   
\f2\b  -Total Schools,\
    -Total Students,\
    -Total Budget,\
    -Average Math Score,\
    -Average Reading Score,\
    -Passing Math,\
    -Passing Reading,\
    -% Overall Passing.
\f1\b0 \
    \
~We then started running the School Summary codes and we have trouble understanding what needs to be replaced on step 12,13,14 but we ran our codes again and here's the results to our School Summary. \
    \
 ~Running High and Low Performing Schools codes we were able to sort out and show the first five schools and bottom five schools.\
        We ran the following codes to get the completed results;\
        \
        -top_schools = per_school_summary_df.sort_values(["% Overall Passing"], ascending=False),\
        -bottom_schools = per_school_summary_df.sort_values(["% Overall Passing"], ascending=True).\
\
~Lastly we worked on;\
\
       
\f2\b -Math and Reading Scores by Grade,\
       -Scores by School Spending,\
       -Scores by School Size,\
       -Scores by School Type.
\f1\b0 \
       \cf5 \

\f2\b ~
\f1\b0 At the end using the following format we were able to get results for both Charter and District;
\f2\b \cf4 \
\
type_summary_df["Average Math Score"] = type_summary_df["Average Math Score"].map("\{:.1f\}".format)\
\
type_summary_df["Average Reading Score"] = type_summary_df["Average Reading Score"].map("\{:.1f\}".format)\
\
type_summary_df["% Passing Math"] = type_summary_df["% Passing Math"].map("\{:.0f\}".format)\
\
type_summary_df["% Passing Reading"] = type_summary_df["% Passing Reading"].map("\{:.0f\}".format)\
\
type_summary_df["% Overall Passing"] = type_summary_df["% Overall Passing"].map("\{:.0f\}".format)\
\
type_summary_df.}